// Code generated by protoc-gen-go. DO NOT EDIT.
// source: collector.proto

package colly

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	any "github.com/golang/protobuf/ptypes/any"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Collector struct {
	UserAgent            string              `protobuf:"bytes,1,opt,name=UserAgent,proto3" json:"UserAgent,omitempty"`
	MaxDepth             int64               `protobuf:"varint,2,opt,name=MaxDepth,proto3" json:"MaxDepth,omitempty"`
	AllowedDomains       []string            `protobuf:"bytes,3,rep,name=AllowedDomains,proto3" json:"AllowedDomains,omitempty"`
	DisallowedDomains    []string            `protobuf:"bytes,4,rep,name=DisallowedDomains,proto3" json:"DisallowedDomains,omitempty"`
	DisallowedURLFilters string              `protobuf:"bytes,5,opt,name=DisallowedURLFilters,proto3" json:"DisallowedURLFilters,omitempty"`
	URLFilters           string              `protobuf:"bytes,6,opt,name=URLFilters,proto3" json:"URLFilters,omitempty"`
	AllowURLRevisit      bool                `protobuf:"varint,7,opt,name=AllowURLRevisit,proto3" json:"AllowURLRevisit,omitempty"`
	MaxBodySize          int32               `protobuf:"varint,8,opt,name=MaxBodySize,proto3" json:"MaxBodySize,omitempty"`
	IgnoreRobotsTxt      bool                `protobuf:"varint,9,opt,name=IgnoreRobotsTxt,proto3" json:"IgnoreRobotsTxt,omitempty"`
	IsAsync              bool                `protobuf:"varint,10,opt,name=IsAsync,proto3" json:"IsAsync,omitempty"`
	ParseHttpError       bool                `protobuf:"varint,11,opt,name=ParseHttpError,proto3" json:"ParseHttpError,omitempty"`
	ID                   uint32              `protobuf:"varint,12,opt,name=ID,proto3" json:"ID,omitempty"`
	DetectCharset        bool                `protobuf:"varint,13,opt,name=DetectCharset,proto3" json:"DetectCharset,omitempty"`
	RedirectHandler      *any.Any            `protobuf:"bytes,14,opt,name=RedirectHandler,proto3" json:"RedirectHandler,omitempty"`
	CheckHead            bool                `protobuf:"varint,15,opt,name=CheckHead,proto3" json:"CheckHead,omitempty"`
	RequestCount         uint32              `protobuf:"varint,16,opt,name=RequestCount,proto3" json:"RequestCount,omitempty"`
	ResponseCount        uint32              `protobuf:"varint,17,opt,name=ResponseCount,proto3" json:"ResponseCount,omitempty"`
	RobotsMap            map[string]*any.Any `protobuf:"bytes,18,rep,name=RobotsMap,proto3" json:"RobotsMap,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *Collector) Reset()         { *m = Collector{} }
func (m *Collector) String() string { return proto.CompactTextString(m) }
func (*Collector) ProtoMessage()    {}
func (*Collector) Descriptor() ([]byte, []int) {
	return fileDescriptor_9305884a292fdf82, []int{0}
}

func (m *Collector) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Collector.Unmarshal(m, b)
}
func (m *Collector) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Collector.Marshal(b, m, deterministic)
}
func (m *Collector) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Collector.Merge(m, src)
}
func (m *Collector) XXX_Size() int {
	return xxx_messageInfo_Collector.Size(m)
}
func (m *Collector) XXX_DiscardUnknown() {
	xxx_messageInfo_Collector.DiscardUnknown(m)
}

var xxx_messageInfo_Collector proto.InternalMessageInfo

func (m *Collector) GetUserAgent() string {
	if m != nil {
		return m.UserAgent
	}
	return ""
}

func (m *Collector) GetMaxDepth() int64 {
	if m != nil {
		return m.MaxDepth
	}
	return 0
}

func (m *Collector) GetAllowedDomains() []string {
	if m != nil {
		return m.AllowedDomains
	}
	return nil
}

func (m *Collector) GetDisallowedDomains() []string {
	if m != nil {
		return m.DisallowedDomains
	}
	return nil
}

func (m *Collector) GetDisallowedURLFilters() string {
	if m != nil {
		return m.DisallowedURLFilters
	}
	return ""
}

func (m *Collector) GetURLFilters() string {
	if m != nil {
		return m.URLFilters
	}
	return ""
}

func (m *Collector) GetAllowURLRevisit() bool {
	if m != nil {
		return m.AllowURLRevisit
	}
	return false
}

func (m *Collector) GetMaxBodySize() int32 {
	if m != nil {
		return m.MaxBodySize
	}
	return 0
}

func (m *Collector) GetIgnoreRobotsTxt() bool {
	if m != nil {
		return m.IgnoreRobotsTxt
	}
	return false
}

func (m *Collector) GetIsAsync() bool {
	if m != nil {
		return m.IsAsync
	}
	return false
}

func (m *Collector) GetParseHttpError() bool {
	if m != nil {
		return m.ParseHttpError
	}
	return false
}

func (m *Collector) GetID() uint32 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *Collector) GetDetectCharset() bool {
	if m != nil {
		return m.DetectCharset
	}
	return false
}

func (m *Collector) GetRedirectHandler() *any.Any {
	if m != nil {
		return m.RedirectHandler
	}
	return nil
}

func (m *Collector) GetCheckHead() bool {
	if m != nil {
		return m.CheckHead
	}
	return false
}

func (m *Collector) GetRequestCount() uint32 {
	if m != nil {
		return m.RequestCount
	}
	return 0
}

func (m *Collector) GetResponseCount() uint32 {
	if m != nil {
		return m.ResponseCount
	}
	return 0
}

func (m *Collector) GetRobotsMap() map[string]*any.Any {
	if m != nil {
		return m.RobotsMap
	}
	return nil
}

func init() {
	proto.RegisterType((*Collector)(nil), "colly.Collector")
	proto.RegisterMapType((map[string]*any.Any)(nil), "colly.Collector.RobotsMapEntry")
}

func init() { proto.RegisterFile("collector.proto", fileDescriptor_9305884a292fdf82) }

var fileDescriptor_9305884a292fdf82 = []byte{
	// 471 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x93, 0x5d, 0x8b, 0xd3, 0x40,
	0x14, 0x86, 0x49, 0x6b, 0x3f, 0x72, 0xba, 0x6d, 0x77, 0x87, 0xbd, 0x18, 0x8b, 0x68, 0x58, 0x44,
	0x82, 0x48, 0x16, 0xea, 0x8d, 0x08, 0x0a, 0xdd, 0x66, 0xa5, 0x85, 0x2d, 0xc8, 0x68, 0x6f, 0xbc,
	0x9b, 0x26, 0xc7, 0x36, 0x6c, 0x9c, 0x89, 0x33, 0xd3, 0xb5, 0xf1, 0x97, 0xf8, 0x73, 0x25, 0x13,
	0xfb, 0x91, 0xa8, 0x77, 0x99, 0xe7, 0x3c, 0x67, 0x72, 0x38, 0xbc, 0x03, 0xc3, 0x48, 0xa6, 0x29,
	0x46, 0x46, 0xaa, 0x20, 0x53, 0xd2, 0x48, 0xd2, 0x2a, 0x40, 0x3e, 0x7a, 0xbc, 0x96, 0x72, 0x9d,
	0xe2, 0xb5, 0x85, 0xab, 0xed, 0xd7, 0x6b, 0x2e, 0xf2, 0xd2, 0xb8, 0xfa, 0xd5, 0x06, 0x77, 0xba,
	0xef, 0x22, 0x4f, 0xc0, 0x5d, 0x6a, 0x54, 0x93, 0x35, 0x0a, 0x43, 0x1d, 0xcf, 0xf1, 0x5d, 0x76,
	0x04, 0x64, 0x04, 0xdd, 0x05, 0xdf, 0x85, 0x98, 0x99, 0x0d, 0x6d, 0x78, 0x8e, 0xdf, 0x64, 0x87,
	0x33, 0x79, 0x01, 0x83, 0x49, 0x9a, 0xca, 0x1f, 0x18, 0x87, 0xf2, 0x1b, 0x4f, 0x84, 0xa6, 0x4d,
	0xaf, 0xe9, 0xbb, 0xac, 0x46, 0xc9, 0x2b, 0xb8, 0x08, 0x13, 0xcd, 0xab, 0xea, 0x23, 0xab, 0xfe,
	0x5d, 0x20, 0x63, 0xb8, 0x3c, 0xc2, 0x25, 0xbb, 0xfb, 0x90, 0xa4, 0x06, 0x95, 0xa6, 0x2d, 0x3b,
	0xda, 0x3f, 0x6b, 0xe4, 0x29, 0xc0, 0x89, 0xd9, 0xb6, 0xe6, 0x09, 0x21, 0x3e, 0x0c, 0xed, 0x4c,
	0x4b, 0x76, 0xc7, 0xf0, 0x21, 0xd1, 0x89, 0xa1, 0x1d, 0xcf, 0xf1, 0xbb, 0xac, 0x8e, 0x89, 0x07,
	0xbd, 0x05, 0xdf, 0xdd, 0xc8, 0x38, 0xff, 0x94, 0xfc, 0x44, 0xda, 0xf5, 0x1c, 0xbf, 0xc5, 0x4e,
	0x51, 0x71, 0xd7, 0x7c, 0x2d, 0xa4, 0x42, 0x26, 0x57, 0xd2, 0xe8, 0xcf, 0x3b, 0x43, 0xdd, 0xf2,
	0xae, 0x1a, 0x26, 0x14, 0x3a, 0x73, 0x3d, 0xd1, 0xb9, 0x88, 0x28, 0x58, 0x63, 0x7f, 0x2c, 0x36,
	0xf7, 0x91, 0x2b, 0x8d, 0x33, 0x63, 0xb2, 0x5b, 0xa5, 0xa4, 0xa2, 0x3d, 0x2b, 0xd4, 0x28, 0x19,
	0x40, 0x63, 0x1e, 0xd2, 0x33, 0xcf, 0xf1, 0xfb, 0xac, 0x31, 0x0f, 0xc9, 0x73, 0xe8, 0x87, 0x68,
	0x30, 0x32, 0xd3, 0x4d, 0x21, 0x1a, 0xda, 0xb7, 0x6d, 0x55, 0x48, 0xde, 0xc3, 0x90, 0x61, 0x9c,
	0x28, 0x8c, 0xcc, 0x8c, 0x8b, 0x38, 0x45, 0x45, 0x07, 0x9e, 0xe3, 0xf7, 0xc6, 0x97, 0x41, 0x19,
	0x8a, 0x60, 0x1f, 0x8a, 0x60, 0x22, 0x72, 0x56, 0x97, 0x8b, 0x44, 0x4c, 0x37, 0x18, 0xdd, 0xcf,
	0x90, 0xc7, 0x74, 0x68, 0xff, 0x70, 0x04, 0xe4, 0x0a, 0xce, 0x18, 0x7e, 0xdf, 0xa2, 0x36, 0x53,
	0xb9, 0x15, 0x86, 0x9e, 0xdb, 0xe9, 0x2a, 0xac, 0x98, 0x93, 0xa1, 0xce, 0xa4, 0xd0, 0x58, 0x4a,
	0x17, 0x56, 0xaa, 0x42, 0xf2, 0x0e, 0xdc, 0x72, 0x59, 0x0b, 0x9e, 0x51, 0xe2, 0x35, 0xfd, 0xde,
	0xf8, 0x59, 0x60, 0xd3, 0x1b, 0x1c, 0xe2, 0x19, 0x1c, 0x8c, 0x5b, 0x61, 0x54, 0xce, 0x8e, 0x1d,
	0x23, 0x06, 0x83, 0x6a, 0x91, 0x9c, 0x43, 0xf3, 0x1e, 0xf3, 0x3f, 0x21, 0x2e, 0x3e, 0xc9, 0x4b,
	0x68, 0x3d, 0xf0, 0x74, 0x8b, 0x36, 0xbb, 0xff, 0x5b, 0x40, 0xa9, 0xbc, 0x6d, 0xbc, 0x71, 0x6e,
	0x3a, 0x5f, 0xca, 0xe7, 0xb3, 0x6a, 0x5b, 0xe3, 0xf5, 0xef, 0x00, 0x00, 0x00, 0xff, 0xff, 0x64,
	0x62, 0x6b, 0xf1, 0x5f, 0x03, 0x00, 0x00,
}
